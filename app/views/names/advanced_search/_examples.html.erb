<div id="example-search-name" class="example-search-tab">
<h4>Name search examples</h4>
<br>
<br>
<% excc = %Q(<span class="purple" title="Excluding common and cultivar names by default.">EXCC</span>) %>
<% incc = %Q(<span class="purple" title="Including common and cultivar names.">INCC</span>) %>

<h5 class="">List names</h5>
<table class="example-searches table table-striped">
  <% [
      {search_target: 'Names', search_string: "acacia",explanation: %Q(List names starting with "acacia".  Bare search is on names. 100 records is the default.)},
      {search_target: 'Names', search_string: "acacia limit: 1 offset: 99",explanation: %Q(List the 100th name starting with "acacia".)},
      {search_target: 'Names', search_string: "acacia limit: 100 offset: 200",explanation: %Q(List the 201st - 300th names starting with "acacia".)},
      {search_target: 'Names', search_string: "acacia type:*", 
       explanation: %Q(Also include common and cultivar names which are normally excluded (i.e. #{excc.sub(/\./,'')}).)},
      {search_target: 'Names', search_string: "*cacia", explanation: %Q(Find names containing "cacia". A trailing wildcard is added automatically. #{excc})},
      {search_target: 'Names', search_string: "acacia type:common,cultivar", explanation: %Q(Find just common or cultivar names exactly matching "acacia". #{incc})},
      {search_target: 'Names', search_string: "acacia rank: genus", explanation: %Q(List any name starting with "acacia" that is a genus. #{excc})},
      {search_target: 'Names', search_string: "acacia rank: genus is-not-a-duplicate:", explanation: %Q(List any name starting with "acacia" that is a genus and is not a duplicate. #{excc})}
      ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string], search_path(query_string: val[:search_string], query_target: val[:search_target]),class:'blue', title: "Run the described search.") %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>


<h5 class="">Simple Name and Name Element searches</h5>
<table class="example-searches table table-striped">
  <% [{search_target: 'Names',
       search_string: "simple-name: williams",
       explanation: %Q(Names with simple name containing "williams".)},
      {search_target: 'Names',
       search_string: "name-element: williams",
       explanation: %Q(List names with name element containing "williams".)},
     ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string],
                  search_path(query_string: val[:search_string],
                  query_target: val[:search_target]),
                  class:'blue',
                  title: "Run the described search.")
      %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>


<h5 class="">Assertion queries</h5>
<table class="example-searches table table-striped">
  <% [
      {search_target: 'Names', search_string: "is-a-parent: has-no-instances:",explanation: %Q(List names that have children but no instances.)},
      {search_target: 'Names', search_string: "has-a-second-parent:",explanation: %Q(List names that have a second parent.)},
      {search_target: 'Names', search_string: "Grevillea has-a-second-parent:",explanation: %Q(List Grevilleas that have a second parent.)},
      {search_target: 'Names', search_string: "acacia is-orth-var-with-no-orth-var-instances:",explanation: %Q(List orth. var. acacias with no orth. var. instance.)},
      {search_target: 'Names', search_string: "*acacia is-orth-var-with-no-orth-var-instances:",explanation: %Q(List orth. var. names containing "acacia" with no orth. var. instance.)},
      {search_target: 'Names', search_string: "acacia status: orth. var. has-no-instances:",explanation: %Q(List orth. var. acacias with no instance.)},
      {search_target: "Names",
       search_string: "is-orth-var-and-sec-ref-first:",
       explanation: %Q(List orth. vars for which the first instance is a \
       secondary reference.)},
      ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string], search_path(query_string: val[:search_string], query_target: val[:search_target]),class:'blue', title: "Run the described search.") %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>


<br>
<h5 class="inline-block">Count names</h5><span> - turn a list into a count</span>
<table class="example-searches table table-striped">
  <% [{search_target: 'Names', search_string: "count acacia",explanation: %Q(Count names starting with "acacia". #{excc})},
      {search_target: 'Names', search_string: "count rank: genus is-not-a-duplicate:", explanation: %Q(Count non-duplicate genera. #{excc})},
      {search_target: 'Names', search_string: "count acacia type:*", explanation: %Q(Count names starting with "acacia". #{incc})},
      {search_target: 'Names', search_string: "count acacia type:common,cultivar", explanation: %Q(Count common or cultivar names starting with "acacia". #{incc})},
      {search_target: 'Names', search_string: "count is-a-duplicate:", explanation: %Q(Count duplicate names. #{excc})},
      {search_target: 'Names', search_string: "count comments:*", explanation: %Q(Count commented names turning a text field into an assertion. #{excc})}
      ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string], search_path(query_string: val[:search_string], query_target: val[:search_target]),class:'blue', title: "Run the described search.") %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>
<br>

<h5 class="inline-block">Limit list size</h5><span> - set the number of records</span>
<table class="example-searches table table-striped">
  <% [{search_target: 'Names', search_string: "acacia limit:5",explanation: %Q(List 5 names starting with "acacia". #{excc})},
      {search_target: 'Names', search_string: "acacia limit:50", explanation: %Q(List 50 names starting with "acacia". #{excc})},
      {search_target: 'Names', search_string: "acacia limit:1000", explanation: %Q(List 1000 names starting with "acacia". #{excc}.)},
      {search_target: 'Names', search_string: "acacia limit:10000", explanation: %Q(List 10000 names starting with "acacia". #{excc}. <span class="red">10000 is the current maximum.</span>)},
      {search_target: 'Names', search_string: "count acacia limit:10 nt:*", explanation: %Q(Count over-rides limit. #{incc}.)}
      ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string], search_path(query_string: val[:search_string], query_target: val[:search_target]),class:'blue', title: "Run the described search.") %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>
<br>

<h5 class="">Associated Reference searches</h5>
<table class="example-searches table table-striped">
  <% [{search_target: 'Names',
       search_string: "ref-title: *papua new guinea*",
       explanation: %Q(Names associated with a reference whose title contains "Papua New Guinea".)},
     ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string],
                  search_path(query_string: val[:search_string],
                  query_target: val[:search_target]),
                  class:'blue',
                  title: "Run the described search.")
      %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>

<h5 class="">Accepted Tree searches</h5>
<table class="example-searches table table-striped">
  <% [{search_target: 'Names',
       search_string: "angophora in-accepted-tree:",
       explanation: %Q(Names matching "angophora%" specifically accepted in or excluded from the accepted tree.)},
      {search_target: 'Names',
       search_string: "angophora not-in-accepted-tree:",
       explanation: %Q(Names matching "angophora%" not specifically accepted in or excluded from the accepted tree.)},
      {search_target: 'Names',
       search_string: "angophora cordata accepted-in-accepted-tree:",
       explanation: %Q(Names matching "angophora cordata%" accepted in the accepted tree.)},
      {search_target: 'Names',
       search_string: "angophora cordata excluded-from-accepted-tree:",
       explanation: %Q(Names matching "angophora cordata%" excluded from the accepted tree.)},
      {search_target: 'Names',
       search_string: "angophora cordata excluded-from-accepted-tree: show-instances:",
       explanation: %Q(Names matching "angophora cordata%" excluded from the accepted tree with instances.)},
     ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string],
                  search_path(query_string: val[:search_string],
                  query_target: val[:search_target]),
                  class:'blue',
                  title: "Run the described search.")
      %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>

<h5 class="">Associated Instance searches</h5>
<table class="example-searches table table-striped">
  <% [
      {search_target: 'Names',
       search_string: "nom-inval-with-orth-var:",
       explanation: %Q(Invalid names identified as orthographic variant.)},
      {search_target: 'Names',
       search_string: "c* nom-inval-with-orth-var:",
       explanation: %Q(Invalid names starting with 'c' identified as orthographic variant.)},
      {search_target: 'Names',
       search_string: "has-no-primary-instance: name: gal",
       explanation: %Q(Names matching gal with no primary instance. Tick Common/Cultivars to include these in the results.)},
      {search_target: 'Names',
       search_string: "has-no-primary-instance: name: gal type:common",
       explanation: %Q(Common names matching gal with no primary instance.)},
      {search_target: 'Names',
       search_string: "apium has-no-primary-instance:",
       explanation: %Q(Names matching apium with no primary instance.)},
      {search_target: 'Names',
       search_string: "has-no-primary-instance: nom-illeg:",
       explanation: %Q(Nom-illeg names with no primary instance.)},
      {search_target: 'Names',
       search_string: "has-no-primary-instance: nom-illeg: name: apium",
       explanation: %Q(Nom-illeg names matching apium with no primary instance.)},
      {search_target: 'Names',
       search_string: "has-no-primary-instance: status: legitimate name: apium",
       explanation: %Q(Legitimate names matching apium with no primary instance.)},
     ].each do |val| %>
  <tr>
    <td class="width-30-percent">
      <%= link_to(val[:search_string],
                  search_path(query_string: val[:search_string],
                  query_target: val[:search_target]),
                  class:'blue',
                  title: "Run the described search.")
      %>
    </td>
    <td><%= val[:explanation].html_safe %></td>
  </tr>
  <% end %>
</table>
<br>


</div>

